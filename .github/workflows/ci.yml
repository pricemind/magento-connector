name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['7.4', '8.0', '8.1', '8.2']
        
    name: PHP ${{ matrix.php-version }} Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, hash, json, mbstring, pcre, pdo, zlib
        coverage: xdebug
        
    - name: Setup standalone testing environment
      run: |
        cp composer-dev.json composer.json
        rm -f composer.lock
        
    - name: Validate composer.json
      run: composer validate --no-check-lock
      
    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ matrix.php-version }}-standalone-${{ hashFiles('**/composer-dev.json') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php-version }}-standalone-
          
    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-progress --no-interaction
        
    - name: Create test directories
      run: |
        mkdir -p var/log
        mkdir -p var/cache
        
    - name: Run PHPUnit tests
      run: |
        vendor/bin/phpunit --configuration phpunit-ci.xml --coverage-clover=coverage.xml --coverage-text
        
    - name: Upload coverage reports to Codecov
      if: matrix.php-version == '8.1'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl
        
    - name: Setup standalone environment
      run: |
        cp composer-dev.json composer.json
        rm -f composer.lock
        
    - name: Cache Composer packages
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-php-8.1-standalone-${{ hashFiles('**/composer-dev.json') }}
        
    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-progress --no-interaction
        
    - name: Run PHPStan
      run: |
        vendor/bin/phpstan analyse --configuration phpstan-standalone.neon --no-progress --error-format=github
        
    - name: Run PHP_CodeSniffer
      run: |
        vendor/bin/phpcs --standard=phpcs-standalone.xml --report=checkstyle --report-file=phpcs-report.xml
        
    - name: Upload PHPCS results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: phpcs-report
        path: phpcs-report.xml
        
  magento-compatibility:
    runs-on: ubuntu-latest
    name: Magento Compatibility Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl
        
    - name: Check module structure
      run: |
        echo "Checking Magento module structure..."
        test -f app/code/Stellion/Pricemind/registration.php
        test -f app/code/Stellion/Pricemind/etc/module.xml
        test -f app/code/Stellion/Pricemind/etc/events.xml
        test -f app/code/Stellion/Pricemind/etc/db_schema.xml
        echo "âœ… All required module files present"
        
    - name: Validate XML files
      run: |
        echo "Validating XML configuration files..."
        xmllint --noout app/code/Stellion/Pricemind/etc/module.xml
        xmllint --noout app/code/Stellion/Pricemind/etc/events.xml
        xmllint --noout app/code/Stellion/Pricemind/etc/db_schema.xml
        xmllint --noout app/code/Stellion/Pricemind/etc/adminhtml/system.xml
        xmllint --noout app/code/Stellion/Pricemind/etc/config.xml
        xmllint --noout app/code/Stellion/Pricemind/etc/acl.xml
        echo "âœ… All XML files are valid"
        
    - name: Check PHP syntax
      run: |
        echo "Checking PHP syntax..."
        find app/code/Stellion/Pricemind -name "*.php" -exec php -l {} \;
        echo "âœ… All PHP files have valid syntax"
        
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        
    - name: Setup standalone environment
      run: |
        cp composer-dev.json composer.json
        rm -f composer.lock
        
    - name: Install dependencies
      run: composer install --no-dev --optimize-autoloader
      
    - name: Run security check
      run: |
        echo "Checking for security vulnerabilities..."
        # Check for common security patterns in PHP files
        echo "Scanning for potential security issues..."
        grep -r "eval(" app/code/Stellion/Pricemind/ || echo "âœ… No eval() usage found"
        grep -r "exec(" app/code/Stellion/Pricemind/ || echo "âœ… No exec() usage found"
        grep -r "system(" app/code/Stellion/Pricemind/ || echo "âœ… No system() usage found"
        grep -r "shell_exec(" app/code/Stellion/Pricemind/ || echo "âœ… No shell_exec() usage found"
        echo "âœ… Basic security scan completed"
        
  build:
    runs-on: ubuntu-latest
    name: Build Package
    needs: [test, code-quality, magento-compatibility, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        
    - name: Create package
      run: |
        mkdir -p dist
        tar -czf dist/pricemind-magento-connector-${{ github.sha }}.tar.gz \
          --exclude='Test' \
          --exclude='.git*' \
          --exclude='dist' \
          --exclude='vendor' \
          --exclude='composer.lock' \
          --exclude='composer-dev.json' \
          --exclude='phpunit*.xml' \
          --exclude='phpcs*.xml' \
          --exclude='phpstan*.neon' \
          --exclude='README.md' \
          app/ composer.json
          
    - name: Upload package artifact
      uses: actions/upload-artifact@v4
      with:
        name: magento-connector-package
        path: dist/
        
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Marketplace
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download package artifact
      uses: actions/download-artifact@v4
      with:
        name: magento-connector-package
        path: dist/
        
    - name: List package contents
      run: |
        echo "ðŸ“¦ Package created successfully:"
        ls -la dist/
        echo "âœ… Ready for marketplace deployment"
